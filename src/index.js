const path = require('path')
const qs = require('querystring')
const loaderUtils = require('loader-utils')
const {cwd} = require('process')

const mixinGeneratorPath = require.resolve('./runtime/mixinGenerator')
const match = require('./match')

module.exports = function (source, sourceMap) {
  // 获取配置数据
  const options = loaderUtils.getOptions(this) || {map: null, log: true}

  const moduleMap =
    typeof options.map === 'string' ? require(path.resolve(cwd(), options.map)) : options.map

  const log = options.log ? console.log : () => {}

  log(`[lazy-store-loader] options.map: ${JSON.stringify(moduleMap)}`)

  if (!moduleMap) return this.callback(null, source, sourceMap)

  const {resourceQuery, resourcePath} = this
  const rawQuery = resourceQuery.slice(1)
  const query = qs.parse(rawQuery)

  if (query._intercepted === undefined) {
    const stringifyRequest = (path) => loaderUtils.stringifyRequest(this, path)

    const result = {}
    // 解析获取模块
    const paths = match(source)
    paths.forEach((p) => {
      if (moduleMap[p]) result[p] = moduleMap[p]
    })
    const size = Object.keys(result).length

    if (size) {
      log(`[lazy-store-loader] ${resourcePath}: ${JSON.stringify(paths)}`)

      const importCode = []
      const pathListCode = []
      const moduleListCode = []
      Object.entries(result).forEach(([path, url]) => {
        const name = '_' + path.replace(/\//g, '_')
        importCode.push(`import ${name} from '${url}'`)
        pathListCode.push(`'${path}'`)
        moduleListCode.push(name)
      })

      let code = `/* generated by lazy-store-loader */
import scriptExports from ${stringifyRequest(`${resourcePath}${resourceQuery}_intercepted`)}
${importCode.join('\n')}
import _mixinGenerator from ${stringifyRequest(`!${mixinGeneratorPath}`)}

const options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

if(!options.mixins)
options.mixins = []
const mixin = _mixinGenerator([${pathListCode.join(',')}], [${moduleListCode.join(',')}])
options.mixins.push(mixin)

export default options`

      return code
    }
  }
  this.callback(null, source, sourceMap)
}
